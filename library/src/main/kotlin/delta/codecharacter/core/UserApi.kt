/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package delta.codecharacter.core

import delta.codecharacter.dtos.ActivateUserRequestDto
import delta.codecharacter.dtos.GenericErrorDto
import delta.codecharacter.dtos.RatingHistoryDto
import delta.codecharacter.dtos.RegisterUserRequestDto
import io.swagger.annotations.Api
import io.swagger.annotations.ApiOperation
import io.swagger.annotations.ApiParam
import io.swagger.annotations.ApiResponse
import io.swagger.annotations.ApiResponses
import io.swagger.annotations.Authorization
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import javax.validation.Valid

@Validated
@Api(value = "User", description = "The User API")
@RequestMapping("\${api.base-path:}")
interface UserApi {

    @ApiOperation(
        value = "Activate user",
        nickname = "activateUser",
        notes = "Activate user by using the token sent via email"
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "OK"
        ), ApiResponse(
            code = 400,
            message = "Bad Request",
            response = GenericErrorDto::class
        ), ApiResponse(
            code = 401,
            message = "Unauthorized"
        ), ApiResponse(code = 404, message = "Not Found")]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/users/{userId}/activate"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun activateUser(
        @ApiParam(
            value = "ID of the user",
            required = true
        ) @PathVariable("userId") userId: java.util.UUID,
        @ApiParam(
            value = "",
            required = true
        ) @Valid @RequestBody activateUserRequestDto: ActivateUserRequestDto
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @ApiOperation(
        value = "Get user rating history",
        nickname = "getRatingHistory",
        notes = "Get user rating history",
        response = RatingHistoryDto::class,
        responseContainer = "List",
        authorizations = [Authorization(value = "http-bearer")]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "OK",
            response = RatingHistoryDto::class,
            responseContainer = "List"
        ), ApiResponse(
            code = 401,
            message = "Unauthorized"
        ), ApiResponse(
            code = 403,
            message = "Forbidden"
        ), ApiResponse(code = 404, message = "Not Found")]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/users/{userId}/ratingHistory"],
        produces = ["application/json"]
    )
    fun getRatingHistory(
        @ApiParam(
            value = "ID of the user",
            required = true
        ) @PathVariable("userId") userId: java.util.UUID
    ): ResponseEntity<List<RatingHistoryDto>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @ApiOperation(
        value = "Register user",
        nickname = "register",
        notes = "Register user"
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 201,
            message = "Created"
        ), ApiResponse(
            code = 400,
            message = "Bad Request",
            response = GenericErrorDto::class
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/users"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun register(
        @ApiParam(
            value = "",
            required = true
        ) @Valid @RequestBody registerUserRequestDto: RegisterUserRequestDto
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
