/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package delta.codecharacter.core

import delta.codecharacter.dtos.CreateMatchRequestDto
import delta.codecharacter.dtos.GenericErrorDto
import delta.codecharacter.dtos.MatchDto
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.*
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@Validated
@RequestMapping("\${api.base-path:}")
interface MatchApi {

    @Operation(
        summary = "Create match",
        operationId = "createMatch",
        description = "Initiate a match by current user",
        responses = [
            ApiResponse(responseCode = "201", description = "Created"),
            ApiResponse(responseCode = "400", description = "Bad Request", content = [Content(schema = Schema(implementation = GenericErrorDto::class))]),
            ApiResponse(responseCode = "401", description = "Unauthorized")
        ],
        security = [ SecurityRequirement(name = "http-bearer") ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/user/matches"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun createMatch(@Parameter(description = "", required = true) @Valid @RequestBody createMatchRequestDto: CreateMatchRequestDto): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Get top matches",
        operationId = "getTopMatches",
        description = "Get top matches",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = MatchDto::class))]),
            ApiResponse(responseCode = "401", description = "Unauthorized")
        ],
        security = [ SecurityRequirement(name = "http-bearer") ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/top-matches"],
            produces = ["application/json"]
    )
    fun getTopMatches(): ResponseEntity<List<MatchDto>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Get user matches",
        operationId = "getUserMatches",
        description = "Get matches played by authenticated user",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = MatchDto::class))]),
            ApiResponse(responseCode = "401", description = "Unauthorized")
        ],
        security = [ SecurityRequirement(name = "http-bearer") ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/user/matches"],
            produces = ["application/json"]
    )
    fun getUserMatches(): ResponseEntity<List<MatchDto>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
