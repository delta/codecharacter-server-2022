/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package delta.codecharacter.core

import delta.codecharacter.dtos.ForgotPasswordRequestDto
import delta.codecharacter.dtos.GenericErrorDto
import delta.codecharacter.dtos.PasswordLoginRequestDto
import delta.codecharacter.dtos.PasswordLoginResponseDto
import delta.codecharacter.dtos.ResetPasswordRequestDto
import io.swagger.annotations.Api
import io.swagger.annotations.ApiOperation
import io.swagger.annotations.ApiParam
import io.swagger.annotations.ApiResponse
import io.swagger.annotations.ApiResponses
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import javax.validation.Valid

@Validated
@Api(value = "Auth", description = "The Auth API")
@RequestMapping("\${api.base-path:}")
interface AuthApi {

    @ApiOperation(
        value = "Forgot password",
        nickname = "forgotPassword",
        notes = "Request password reset email to be sent when user forgot their password"
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 202,
            message = "Accepted"
        ), ApiResponse(
            code = 400,
            message = "Bad Request",
            response = GenericErrorDto::class
        ), ApiResponse(code = 401, message = "Unauthorized")]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/auth/forgot-password"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun forgotPassword(
        @ApiParam(
            value = "",
            required = true
        ) @Valid @RequestBody forgotPasswordRequestDto: ForgotPasswordRequestDto
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @ApiOperation(
        value = "Password Login",
        nickname = "passwordLogin",
        notes = "Login with email and password and get bearer token for authentication",
        response = PasswordLoginResponseDto::class
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "OK",
            response = PasswordLoginResponseDto::class
        ), ApiResponse(
            code = 400,
            message = "Bad Request",
            response = GenericErrorDto::class
        ), ApiResponse(
            code = 401,
            message = "Unauthorized",
            response = GenericErrorDto::class
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/auth/login/password"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun passwordLogin(
        @ApiParam(
            value = "",
            required = true
        ) @Valid @RequestBody passwordLoginRequestDto: PasswordLoginRequestDto
    ): ResponseEntity<PasswordLoginResponseDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @ApiOperation(
        value = "Reset password",
        nickname = "resetPassword",
        notes = "Reset password using the token from password reset email"
    )
    @ApiResponses(
        value = [ApiResponse(code = 204, message = "No Content"), ApiResponse(
            code = 400,
            message = "Bad Request",
            response = GenericErrorDto::class
        ), ApiResponse(code = 401, message = "Unauthorized")]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/auth/reset-password"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun resetPassword(
        @ApiParam(
            value = "",
            required = true
        ) @Valid @RequestBody resetPasswordRequestDto: ResetPasswordRequestDto
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
