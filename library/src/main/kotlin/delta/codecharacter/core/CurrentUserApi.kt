/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package delta.codecharacter.core

import delta.codecharacter.dtos.CompleteProfileRequestDto
import delta.codecharacter.dtos.CurrentUserProfileDto
import delta.codecharacter.dtos.GenericErrorDto
import delta.codecharacter.dtos.UpdateCurrentUserProfileDto
import delta.codecharacter.dtos.UpdatePasswordRequestDto
import io.swagger.annotations.Api
import io.swagger.annotations.ApiOperation
import io.swagger.annotations.ApiParam
import io.swagger.annotations.ApiResponse
import io.swagger.annotations.ApiResponses
import io.swagger.annotations.Authorization
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import javax.validation.Valid

@Validated
@Api(value = "CurrentUser", description = "The CurrentUser API")
@RequestMapping("\${api.base-path:}")
interface CurrentUserApi {

    @ApiOperation(
        value = "Complete user profile",
        nickname = "completeUserProfile",
        notes = "Complete the user profile for users who registered using OAuth",
        authorizations = [Authorization(value = "http-bearer")]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "OK"
        ), ApiResponse(code = 401, message = "Unauthorized")]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/user/complete-profile"],
        consumes = ["application/json"]
    )
    fun completeUserProfile(
        @ApiParam(
            value = "",
            required = true
        ) @Valid @RequestBody completeProfileRequestDto: CompleteProfileRequestDto
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @ApiOperation(
        value = "Get current user profile",
        nickname = "getCurrentUser",
        notes = "Get current user profile",
        response = CurrentUserProfileDto::class,
        authorizations = [Authorization(value = "http-bearer")]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "OK",
            response = CurrentUserProfileDto::class
        ), ApiResponse(code = 401, message = "Unauthorized")]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/user"],
        produces = ["application/json"]
    )
    fun getCurrentUser(): ResponseEntity<CurrentUserProfileDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @ApiOperation(
        value = "Update current user",
        nickname = "updateCurrentUser",
        notes = "Update current user",
        authorizations = [Authorization(value = "http-bearer")]
    )
    @ApiResponses(
        value = [ApiResponse(code = 204, message = "No Content"), ApiResponse(
            code = 400,
            message = "Bad Request",
            response = GenericErrorDto::class
        )]
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/user"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun updateCurrentUser(
        @ApiParam(
            value = "",
            required = true
        ) @Valid @RequestBody updateCurrentUserProfileDto: UpdateCurrentUserProfileDto
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @ApiOperation(
        value = "Update password",
        nickname = "updatePassword",
        notes = "Update password",
        authorizations = [Authorization(value = "http-bearer")]
    )
    @ApiResponses(
        value = [ApiResponse(code = 204, message = "No Content"), ApiResponse(
            code = 400,
            message = "Bad Request",
            response = GenericErrorDto::class
        ), ApiResponse(
            code = 401,
            message = "Unauthorized"
        ), ApiResponse(code = 403, message = "Forbidden")]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/user/password"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun updatePassword(
        @ApiParam(
            value = "",
            required = true
        ) @Valid @RequestBody updatePasswordRequestDto: UpdatePasswordRequestDto
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
